// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Content Management
model BlogPost {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String
  content     String
  author      String
  category    String
  readTime    String
  coverImage  String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CaseStudy {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  client      String
  industry    String
  color       String   @default("purple")
  tagline     String
  overview    String
  challenge   String
  solution    String
  results     String
  testimonial String?
  coverImage  String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id          String   @id @default(cuid())
  name        String
  role        String
  company     String
  content     String
  image       String?
  rating      Int      @default(5)
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  tagline     String
  description String
  icon        String   @default("FileText")
  features    String   // JSON array
  benefits    String   // JSON array
  process     String   // JSON array
  deliverables String  // JSON array
  pricing     String?
  published   Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  fileUrl     String?
  downloadUrl String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String
}

// AI Research Reports
model ResearchReport {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Report metadata
  title         String
  type          String   // 'website', 'social', 'niche'
  status        String   // 'processing', 'completed', 'failed'

  // Input data
  urls          String?  // JSON array of URLs
  socialHandles String?  // JSON object with linkedin, twitter, instagram
  nicheData     String?  // JSON object with description, audience, geography
  context       String?  // Additional user context
  focusAreas    String?  // JSON array of selected focus areas
  depth         String?  // 'quick', 'standard', 'deep'

  // Generated output
  report        String   // Markdown report content
  summary       String?  // Executive summary
  opportunities String?  // JSON array of extracted opportunities

  // Metadata
  processingTime Int?    // Seconds taken
  tokensUsed     Int?    // AI tokens consumed
  userId         String? // Future: link to user

  @@index([createdAt])
  @@index([type])
  @@index([status])
}
